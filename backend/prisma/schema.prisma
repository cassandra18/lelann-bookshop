generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("customer")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[]
}

model Subcategory {
  id            String        @id @default(uuid())
  name          String        @unique
  parent_id     String?
  category_id   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products Product[] @relation("ProductSubcategories")
  category      Category      @relation(fields: [category_id], references: [id])
  parent        Subcategory?  @relation("SubcategorySelfRelation", fields: [parent_id], references: [id])
  subcategories Subcategory[] @relation("SubcategorySelfRelation")
}

model Product {
  id             String      @id @default(uuid())
  name           String      @unique
  price          Float
  cta            String      @default("Buy Now")
  condition      String      @default("NEW")
  subject        String?
  grade          String?
  format         String?
  isbn           String?     @unique
  edition        String?
  language       String?
  pages          Int?
  yearPublished  Int?
  stock          Int?
  curriculum     String?
  level          String?
  ageRange       String?
  availability   Boolean?    @default(true)
  rating         Float?
  author_id      String?
  publisher_id   String?
  image          String
  description    String
  company        String
  featured       Boolean     @default(false)
  bestseller     Boolean     @default(false)
  newarrival     Boolean     @default(false)
  wishlist       Boolean     @default(false)
  promotion      Boolean     @default(false)
  oldPrice       Float?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  author         Author?     @relation(fields: [author_id], references: [id])
  publisher      Publisher?  @relation(fields: [publisher_id], references: [id])
  subcategories    Subcategory[] @relation("ProductSubcategories")
}

model Author {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  books     Product[]
}

model Publisher {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  books     Product[]
}

enum Condition {
  NEW
  USED
  USED_GOOD
  USED_VERY_GOOD
  USED_ACCEPTABLE
}


model Order {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  phone         String
  deliveryOption String   // "delivery" or "pickup"
  paymentMethod  String   // "mpesa" or "card"
  street        String
  city          String
  apartment     String?
  county        String
  subtotal      Float
  total         Float
  status        String    @default("pending")
  createdAt     DateTime  @default(now())
  
  items         OrderItem[]
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  orderId  Int
  productId String
  quantity Int
  price    Float
  order    Order @relation(fields: [orderId], references: [id])
}
